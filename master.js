//40k battle simulator using 8th edition stats.

// This is a proof of concept area for experimentation with javascript


//program purpose: dermine outcome of 1 round of combat between 2 units.
//paramaters needed: stat line of both units
//					 units used and number of troops
//					 weapons used (static attached to units for now)
//preconditions: need stats pre-determined
//postconditions: none
// going to need: hit check
//				  wound check
//				  armor check


//stats will be in program for now, will call classes called "codex" later for each army

const orkBoy = [5,4,4,6]; //[toHit,stenght,toughness,armor] strengh = weapon: shoota

const guardsman	=[4,3,3,5]; //[toHit,strength,toughness,armor] strengh = weapon: lasgun





//d6 dice roller

const roll6 = (num) =>{
	const rand = Math.ceil(Math.random()*6)
	return rand
}

// rolling multiple d6
const multiDice = (num) =>{
	const roll6 = () => Math.ceil(Math.random()*6)
	const rolls = [...Array(num)]
	const results = rolls.map(roll6)
	return mapit
}
//return "hit" if result is 5 or 6

const orkHits = (num) =>{
	const roll6 = () => Math.ceil(Math.random()*6)
	const rolls = [...Array(num)]
	const results = rolls.map(roll6)
	return (results.filter(num => num >= 5 )).length.toString().concat(" Hits")
}		//proof of concept without variables pulled in


//console.log(orkHits(50),"orkhits")



// math of 40k
//first roll to hit, to hit you need to roll >= to the "toHit"  (BS for shooting, WS for melee)
//second, roll to wound, take the strength of the weapon and the toughness
//of the target.
//				  If they are = then wound on >= 4
//				  If strengh > toughness wound on >= 3
//				  If strenght >= 2(toughness), wound on >= 2
//				  If strength < toughness, wound on >= 5
//				  If strenght <= 2(toughness), wound on 6 only


//num is number of shots provided in at console.log
//assume orks shooting at guardsmen for this iteration

//// SOMETHING BELOW THIS POINT IS NOT WORKING
	//this bit get number of hits
	const numofHits = (hits) =>{
		const roll6 = () => Math.ceil(Math.random()*6)
		const rolls = [...Array(hits)]
		const results = rolls.map(roll6)
		return ((results.filter(num => num >= 5 )).length)
	}
console.log(numofHits(),"hits")



	//this bit determines what number on the next roll will be needed to confirm a wound
	// on the target, remember that this time we are assuming orks are shooting at guard
	const woundMath = ( ) =>{
		const orkStrength = orkBoy[1];
		const guardToughness = guardsman[2];

			if( orkStrength == guardToughness)
				return 4;
			if( 2*(guardToughness) > orkStrength && orkStrength > guardToughness)
				return 3;
			if( orkStrength >= 2*(guardToughness))
				return 2;
			if( 0.5*(guardToughness) > orkStrength && orkStrength < guardToughness)
				return 5;
			if( orkStrength <= 2*(guardToughness))
				return 6;

	}
		console.log(woundMath(),'roll needed to wound')




	//this bit takes the number generated by woundsMath and roll another d6
	//to see how many hits wound.
	//num should = the results of numofHits
	const numofWounds = (wounds) =>{
		const roll6 = () => Math.ceil(Math.random()*6)
	////////////////////////////////////////////////////////////
		const rolls = [...Array(num)]  //<<<<error here
		console.log(rolls,'wound array')
		const results = rolls.map(roll6)
		return (results.filter(num => num >= woundMath()).length)
	}
	console.log(numofWounds(),"wounds")




//this bit added on adds the armor check of the defender. NOTE: this does not take AP weapons or
//multi-wound weapons into effect
		const armorCheck = (wounds) =>{
		const guardD = guardsman[3];
		const roll6 = () => Math.ceil(Math.random()*6)
		const rolls = [...Array(wounds)]
		const results = rolls.map(roll6)
		//console.log('num ', num);
		//console.log('results ', results)
		return (results.filter(num => num < guardD))
	}
	console.log(armorCheck(),"failed saves")


const attack = (num) =>{
	return armorCheck(numofWounds(numofHits(num)))
}


console.log(attack(50))
